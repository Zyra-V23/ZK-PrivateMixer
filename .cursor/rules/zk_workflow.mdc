---
description: 
globs: 
alwaysApply: true
---
---
description: Defines the rigorous workflow for Zero-Knowledge circuit development using Circom and snarkjs (Groth16). Emphasizes security, efficiency, and best practices.
globs: ["circuits/**/*.circom", "scripts/zk*.js", "contracts/Verifier.sol"] # Relevant files
alwaysApply: true
---

- **Core Principle: Rigor & Consistency**
    - This workflow ensures reproducibility, security, and efficiency in ZK component development. Adhere strictly to these steps.
    - Maintain consistency between circuit definitions, Solidity contracts, and frontend interactions, especially regarding public inputs and data types.

- **1. Circuit Design & Implementation (`.circom`)**
    - **Location:** `circuits/` directory. Use `circuits/lib/` for copied external components. ([architecture.mdc](mdc:.cursor/rules/architecture.mdc)).
    - **Main File:** Define the primary circuit logic (e.g., `circuits/mixer.circom`).
    - **Libraries (`circomlib` & Local):**
        - **Verify `circomlib` Components:** Before using a `circomlib` component, **confirm its existence and path** in the project's `node_modules/circomlib/circuits` for the installed version. Do not assume standard locations.
        - **Prefer `circomlib`:** Use audited `circomlib` components where available and verified (e.g., `Poseidon`, `Comparators`).
        - **Copy Crucial Components Locally:** For vital or hard-to-find components (e.g., standard Merkle verifiers), copy the source code into `circuits/lib/`, document the origin, and use local includes. See [circom_rules.mdc](mdc:.cursor/rules/circom_rules.mdc).
    - **Hashing (Poseidon):**
        - **Use `Poseidon` Template:** Employ the `Poseidon` template from `circomlib`.
        - **CRITICAL: Cross-Stack Consistency:** The exact Poseidon implementation (parameters, etc.) used in Circom **must** stent with the implementations used in Solidity and JavaScript/Frontend. Implement explicit tests for this. See [solidity_rules.mdc](mdc:.cursor/rules/solidity_rules.mdc) and [web3_integration_rules.mdc](mdc:.cursor/rules/web3_integration_rules.mdc). Mismatches *will* cause proof failures.
        - **Domain Separation:** Use distinct Poseidon instances or inputs if hashing different types of data.
    - **Merkle Trees (Standard/Dense):**
        - **Use Standard Verifier:** Use a template like `VerifyMerklePath` (copied to `circuits/lib/`) for standard Merkle proofs generated by libraries like `@zk-kit/incremental-merkle-tree`.
        - **Inputs:** Ensure `leaf`, `root`, `pathElements`, and `pathIndices` are correctly provided.
        - **JS Library Choice:** Prefer `@zk-kit/incremental-merkle-tree` over `merkletreejs` due to potentially better compatibility with Circom/Poseidon patterns used in ZK ecosystems.
    - **Public Inputs (`main component { public [...] }`)**:
        - **Define Explicitly & Match Verifier:** Order and number must exactly match `Verifier.sol`.
        - **Minimal Set & Anchors:** Include necessary anchors (`root`, `nullifierHash`) and context (`recipient`, `chainId`, etc.) for security.
    - **Private Inputs:** Handle secrets carefully; use `.gitignore`.
    - **Constraints (`===`, `<==`):** Ensure all logic is constrained. Use `assert` only for temporary debugging.

- **2. Circuit Compilation (`circom`)**
    - **Goal:** Convert `.circom` to R1CS and WASM/C++.
    - **Command:** Use the **global `circom` compiler** (ensure version >= 2.0). Provide library paths via `-l`.
      ```bash
      # Example using local lib copy
      circom circuits/mixer.circom --r1cs --wasm --sym -o build/zk -l node_modules/circomlib/circuits -l circuits
      ```
    - **Flags:** `--r1cs`, `--wasm`, `--sym`, `--output`, `-l <path_to_libs>`.
    - **Verification:** Check for successful output (`.r1cs`, `.wasm`, `.sym`).

- **3. Trusted Setup - Groth16 (`snarkjs`)**
    - **Goal:** Generate proving key (`.zkey`) and verification key (`verification_key.json`).
    - **Location:** Use the circuit build output directory (e.g., `build/zk/`).
    - **A. Powers of Tau:** Download appropriate (`.ptau`) file from a reputable ceremony based on circuit constraint size. Store in `/keys` or `/build/zk`. DO NOT use development-generated `.ptau` for production.
    - **B. Phase 2 (Circuit Specific):** Use `snarkjs groth16 setup`, `snarkjs zkey contribute`, `snarkjs zkey export verificationkey`.
        ```bash
        # Example (ensure correct ptau path)
        npx snarkjs groth16 setup build/zk/mixer.r1cs keys/powersOfTau_final.ptau build/zk/mixer_0000.zkey
        npx snarkjs zkey contribute build/zk/mixer_0000.zkey build/zk/mixer_final.zkey --name="Dev Contrib" -v -e="random entropy"
        npx snarkjs zkey export verificationkey build/zk/mixer_final.zkey build/zk/verification_key.json
        ```
    - **Artifacts:** Securely handle `mixer_final.zkey` (private); commit `verification_key.json` (public).

- **4. Generate Verifier Contract (`snarkjs`)**
    - **Goal:** Create `Verifier.sol`.
    - **Command:**
      ```bash
      npx snarkjs zkey export solidityverifier build/zk/mixer_final.zkey contracts/Verifier.sol
      ```
    - **Action:** Overwrites `contracts/Verifier.sol`.
    - **Post-Generation:** Modify the generated `Verifier.sol` to implement the `IVerifier` interface (defined in `contracts/interfaces/IVerifier.sol`). Add `import "../interfaces/IVerifier.sol";` and change `contract Verifier` to `contract Verifier is IVerifier`. Add `override` to `verifyProof`.

- **5. Input Generation & Witness Calculation**
    - **Goal:** Create valid circuit inputs and calculate the witness (`.wtns`).
    - **A. Generate Valid Inputs (JS/Scripts):**
        - Use helper scripts (e.g., `scripts/generate_inputs.js`).
        - **CRITICAL: Hash Consistency:** Use the *exact same JS hash implementation* (e.g., Poseidon from `circomlibjs`) that was verified to be consistent with the Solidity implementation.
        - Ensure cryptographic consistency (commitment = H(nullifier, secret), nullifierHash = H(nullifier, context...)).
        - Store inputs in `/inputs`. Use `.gitignore` for secrets.
    - **B. Witness Generation (Prefer CLI):**
        - Use `snarkjs wtns calculate` (more stable than JS API).
          ```bash
          npx snarkjs wtns calculate build/zk/mixer_js/mixer.wasm inputs/example_input.json build/zk/witness.wtns
          ```
        - Troubleshoot path issues or use shell scripts for automation.

- **6. Proof Generation (`snarkjs`)**
    - **Goal:** Generate the ZK-SNARK proof (`proof.json`, `public.json`).
    - **Prefer CLI:**
      ```bash
      npx snarkjs groth16 prove build/zk/mixer_final.zkey build/zk/witness.wtns build/zk/proof.json build/zk/public.json
      ```
    - **Generate Solidity Calldata:**
      ```bash
      npx snarkjs zkey export soliditycalldata build/zk/public.json build/zk/proof.json > build/zk/calldata.txt
      ```

- **7. Verification (`snarkjs` / Solidity / Tests)**
    - **A. Off-Chain Verification:** Use `snarkjs groth16 verify` for quick checks.
    - **B. On-Chain Verification (Tests & Contract):**
        - **Input Formatting:** Format proof components and public inputs exactly as `IVerifier.verifyProof` expects. Use helper functions in tests.
        - **Public Input Source:** Use the correct source for public inputs (e.g., for `root`, use the value calculated *by the Solidity contract* after the relevant state change, not a potentially inconsistent JS-calculated value).
        - **Contract Call:** Call `ZKMixer.withdraw` passing formatted proof and consistent public inputs.

- **8. Common Troubleshooting & Best Practices**
    - **Circuit Compilation Errors:** Check syntax, includes, library paths (`-l` flag).
    - **Witness/Proof Errors (`Assert Failed`):**
        - **Root Cause:** Usually indicates inconsistency between off-chain calculation (JS inputs) and on-chain/circuit verification.
        - **Check Hashes:** Verify hash function consistency across JS/Solidity/Circom.
        - **Check Merkle Logic:** Ensure JS tree library logic matches circuit verifier (SMT vs Dense, padding, zero value).
        - **Check Public Inputs:** Double-check order and values passed to `generateProof` vs. circuit expectations.
    - **Progressive Testing:** Test components individually. Use simple inputs first.
    - **Automation:** Use shell scripts for the compile-setup-prove workflow.

- **9. Iteration**
    - If the circuit (`.circom`) is modified, **repeat all steps from Compilation (2) onwards**.