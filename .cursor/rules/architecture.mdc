---
description: 
globs: 
alwaysApply: true
---
---
description: Defines the standard directory structure for the ZK Mixer project.
globs: "*" # Apply generally to the project structure thinking
alwaysApply: true
---

- **Core Project Structure**
    - Maintain the following top-level directory structure for clarity and separation of concerns.
    - Place files strictly within their designated directories based on their function.

- **Directory Definitions**
    - **`/contracts`**: Contains all Solidity smart contracts (`.sol`).
        - Includes the main `ZKMixer.sol`, `Verifier.sol` interface, `MockVerifier.sol`, and any necessary libraries (e.g., `MerkleTree.sol` when added).
    - **`/circuits`**: Contains all Circom circuit definitions (`.circom`).
        - Includes the main `mixer.circom` and any imported templates or sub-circuits.
        - May also contain input JSON files (`.json`) for testing circuits.
        - Should include a `/circuits/build` directory for compiled circuit output.
    - **`/keys`**: Contains cryptographic setup files.
        - Powers of Tau files (`.ptau`) required for circuit setup.
        - Generated proving keys (`.zkey`) and verification keys (`.vkey` or `.json`).
    - **`/inputs`**: Contains JSON input files for circuit testing.
        - Should include different variants for production, testing, and debugging.
        - File naming should clearly indicate purpose (e.g., `simple_input.json`, `debug_input.json`).
    - **`/frontend`**: Contains the React web application source code.
        - Structure within this directory should follow standard React practices (e.g., `/src`, `/public`, component folders).
    - **`/scripts`**: Contains utility and automation scripts (`.js` or `.cjs`).
        - Includes deployment scripts (e.g., `deploy.js`), circuit compilation scripts, proof generation helpers, etc.
        - Should include scripts for full ZK proof workflow (setup, witness generation, proof generation).
    - **`/test`**: Contains test files (`.js` or `.cjs`).
        - Includes unit tests for smart contracts (using Hardhat/ethers/chai) and potentially tests for circuits or scripts.
    - **`/ignition`**: Contains Hardhat Ignition deployment modules (if used). Default location created by Hardhat.
    - **`/tasks`**: Contains task definition files generated by `task-master`.
    - **`/node_modules`**: Managed by npm/yarn. Do not modify directly. Add to `.gitignore`.
    - **`.cursor/rules`**: Contains project-specific rules (`.mdc`) for AI guidance.

- **Configuration Files**
    - Place configuration files (e.g., `hardhat.config.cjs`, `package.json`, `.env`, `.gitignore`, `tsconfig.json` if used) in the **root directory**.

- **ZK Circuit Development Workflow**
    - Follow these steps when developing and testing Circom circuits:
        1. **Compilation**: Use `circom circuit.circom --r1cs --wasm --sym -o <output_dir>` to compile circuits.
        2. **Setup**: Download appropriate `.ptau` file matching circuit complexity, then generate proving/verification keys.
        3. **Input Generation**: Create valid circuit inputs in the `/inputs` directory, ensuring cryptographic consistency.
        4. **Witness Generation**: Use `snarkjs wtns calculate` with the compiled circuit and valid inputs.
        5. **Proof Generation**: Use `snarkjs groth16 prove` to generate proofs.
        6. **Verification**: Use `snarkjs groth16 verify` to verify proofs.
    - When working with complex circuits (e.g., those using SMTVerifier), ensure all requirements are met:
        - For SMTLevIns, the last pathElement must be zero, and at least one previous element non-zero.
        - Hash values must be calculated using the actual hash function implementation (e.g., Poseidon).
    - Start testing with simple circuits before attempting complex ones.

- **Adding New Directories**
    - If new logical components require dedicated directories (e.g., `/docs` for documentation, `/utils` for shared utilities), discuss and agree upon their addition before creating them. Update this rule accordingly.