---
description: 
globs: 
alwaysApply: true
---
 ---
description: Guidelines and best practices for developing the ZK Mixer frontend application.
globs: ["frontend/**/*.js", "frontend/**/*.jsx", "frontend/**/*.css"]
alwaysApply: true
---

- **General Architecture**
    - **Component Structure**: Organize components in a logical, hierarchical manner. Use the following directory structure:
        - `/components`: For reusable UI components
        - `/contexts`: For React contexts and providers
        - `/utils`: For utility functions
        - `/abis`: For contract ABIs
    - **Component Size**: Keep components focused on a single responsibility. Components exceeding 250 lines should be considered for splitting.
    - **State Management**: Use React Context API for global state management. Avoid prop drilling beyond 2 levels.

- **React Best Practices**
    - **Functional Components**: Use functional components with hooks for all new components.
    - **Hook Organization**: Ensure custom hooks follow the "use-" naming convention. Keep hooks focused on a specific piece of functionality.
    - **useEffect Usage**: Be explicit about dependencies in useEffect. Avoid unnecessary re-renders by properly memoizing functions and values with useCallback and useMemo.
    - **Error Handling**: Implement proper error boundaries and error states for API calls and blockchain interactions.
    - **Code Splitting**: Use React.lazy() and Suspense for code splitting in larger applications to optimize load times.

- **User Experience (UX) Guidelines**
    - **Loading States**: Always provide loading indicators during blockchain interactions.
    - **Error Messages**: Display clear, user-friendly error messages. Translate technical errors into understandable language.
    - **Confirmation Steps**: Implement confirmation steps for actions with permanent consequences (e.g., deposits, withdrawals).
    - **Mobile Responsiveness**: Ensure all components work on mobile devices. Use responsive design principles.
    - **Accessibility**: Follow WCAG guidelines. Include proper alt text, aria labels, and ensure keyboard navigation.

- **Web3/Ethereum Integration**
    - **Wallet Connection**: Use a consistent pattern for wallet connections. Implement proper error handling for common wallet issues.
    - **Transaction Flow**: Follow this pattern for blockchain transactions:
        1. Show loading state
        2. Execute transaction
        3. Wait for confirmation
        4. Update UI
        5. Handle errors gracefully
    - **Gas Estimation**: Provide gas estimates before transactions when possible.
    - **Network Detection**: Check for correct network and guide users to switch if needed.
    - **Chain ID Handling**: Always verify chain ID before transactions to prevent incorrect network submissions.

- **Privacy and Security**
    - **Information Disclosure**: Be careful about what data is logged or stored. Never log or store user's private notes or keys.
    - **Local Storage**: Use local storage only for non-sensitive data. Encrypt any sensitive data that needs to be stored.
    - **Input Validation**: Validate all inputs, especially addresses and amounts.
    - **Link Protection**: Use rel="noopener noreferrer" for external links.

- **ZK Mixer Specific**
    - **Note Management**: Provide clear instructions about the importance of storing notes safely.
    - **Educational Content**: Include educational elements to help users understand the privacy features.
    - **Denomination Handling**: Clearly display denomination options and current selection.
    - **Nullifier/Commitment Display**: Use truncated displays for lengthy cryptographic values with options to view/copy full values.
    - **Withdrawal Flow**: Implement a clear, step-by-step flow for withdrawals to ensure users understand the process.

- **CSS Guidelines**
    - **CSS Organization**: Use CSS modules or styled-components for component-specific styling.
    - **Variable Usage**: Use CSS variables for colors, spacing, and typography to maintain consistency.
    - **Mobile-First**: Follow mobile-first approach for responsive design.
    - **Dark Mode Support**: Consider supporting dark mode for better user experience.

- **Testing**
    - **Component Testing**: Write tests for all critical components.
    - **Integration Testing**: Test critical user flows like connecting wallet, depositing, and withdrawing.
    - **Mocking**: Mock blockchain interactions for faster and more reliable tests.
    - **Test Coverage**: Aim for at least 70% test coverage for critical components.

- **Documentation**
    - **Component Documentation**: Document component props and behavior.
    - **Code Comments**: Add meaningful comments for complex logic.
    - **README**: Maintain an up-to-date README with setup instructions and architecture overview.