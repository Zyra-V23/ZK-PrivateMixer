# Task ID: 3
# Title: Refactor ZK Core for Poseidon & Standard Merkle Compatibility
# Status: done
# Dependencies: 1
# Priority: high
# Description: Refactor the core ZK components (smart contract, circuit) to use consistent Poseidon hashing and standard Merkle tree verification.
# Details:
Integrated local `PoseidonT3.sol`, switched Circom circuit to `VerifyMerklePath` (local copy), updated public inputs, compiled circuit, performed Groth16 setup, and updated integration tests (`ZKMixer.test.cjs`) to use `@zk-kit/incremental-merkle-tree` and contract-calculated root, successfully passing end-to-end tests.

# Test Strategy:
Verified component unit tests (Poseidon hashing, Merkle logic). Achieved end-to-end test coverage for deposit-proof-withdraw cycle using the refactored system in `ZKMixer.test.cjs`.

# Subtasks:
## 1. Review and Adapt Project Rules for Ethereum ZK Implementation [done]
### Dependencies: None
### Description: 
### Details:


## 2. Research & Integrate Poseidon Solidity Implementation [done]
### Dependencies: None
### Description: 
### Details:


## 3. Implement SMT Library/Logic in Solidity [done]
### Dependencies: 3.2
### Description: 
### Details:


## 4. Refactor ZKMixer.sol for Poseidon & SMT [done]
### Dependencies: 3.2, 3.3
### Description: 
### Details:


## 5. Correct Proof Verification Inputs in ZKMixer.sol [done]
### Dependencies: 3.4
### Description: 
### Details:


## 6. Adapt Circom Circuit for Poseidon (If Needed) [done]
### Dependencies: 3.2
### Description: 
### Details:


## 7. Update Integration Tests (ZKMixer.test.cjs) [done]
### Dependencies: 3.5, 3.6
### Description: 
### Details:


