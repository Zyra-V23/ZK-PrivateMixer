#!/bin/bash

# Exit on error
set -e

echo "Starting project cleanup..."

# Create backup directory
BACKUP_DIR="./backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
echo "Created backup directory: $BACKUP_DIR"

# 1. Clean up circuits directory - too many library files directly in circuits/ directory
echo "Cleaning circuits directory..."
mkdir -p "$BACKUP_DIR/circuits_lib"
find ./circuits -maxdepth 1 -name "*.circom" ! -name "mixer.circom" ! -name "multiplier.circom" ! -name "example.circom" -exec mv {} "$BACKUP_DIR/circuits_lib/" \;
echo "Moved library circuit files to backup"

# 2. Remove test and example circuit duplicates
echo "Cleaning test and example circuits..."
mkdir -p "$BACKUP_DIR/test_circuits"
mv ./circuits/test.circom "$BACKUP_DIR/test_circuits/" 2>/dev/null || true
mv ./circuits/test_circuit.circom "$BACKUP_DIR/test_circuits/" 2>/dev/null || true
mv ./circuits/minimal.circom "$BACKUP_DIR/test_circuits/" 2>/dev/null || true
mv ./circuits/simple.circom "$BACKUP_DIR/test_circuits/" 2>/dev/null || true

# 3. Clean up duplicate build files in circuits/build
echo "Cleaning circuits/build directory..."
mkdir -p "$BACKUP_DIR/circuits_build"
# Back up example and unused builds
mv ./circuits/build/example* "$BACKUP_DIR/circuits_build/" 2>/dev/null || true

# 4. Clean up multiple build directories
echo "Organizing build directories..."
mkdir -p "$BACKUP_DIR/build"
# Move example build to backup
mv ./build/example "$BACKUP_DIR/build/" 2>/dev/null || true
# Keep only the latest multiplier build (which we successfully used)

# 5. Clean multiple verifier contracts
echo "Cleaning up contracts..."
mkdir -p "$BACKUP_DIR/contracts"
# Keep only the necessary verifiers
if [ -f ./contracts/RealMultiplierVerifier.sol ]; then
    # If we're using RealMultiplierVerifier, we can move extra verifiers to backup
    cp ./contracts/Verifier.sol "$BACKUP_DIR/contracts/" 2>/dev/null || true
    cp ./contracts/RealVerifier.sol "$BACKUP_DIR/contracts/" 2>/dev/null || true
fi

# 6. Clean artifact files (these are generated by compiler and can be regenerated)
echo "Cleaning artifacts..."
if [ -d "./artifacts" ]; then
    mv ./artifacts "$BACKUP_DIR/" 2>/dev/null || true
    echo "Moved artifacts to backup (can be regenerated with 'npx hardhat compile')"
fi

# 7. Clean cache files (these are generated by compiler and can be regenerated)
echo "Cleaning cache..."
if [ -d "./cache" ]; then
    mv ./cache "$BACKUP_DIR/" 2>/dev/null || true
    echo "Moved cache to backup (can be regenerated with 'npx hardhat compile')"
fi

echo "Cleanup completed. All removed files are backed up in $BACKUP_DIR."
echo "You can safely delete the backup directory once you've verified everything works correctly:"
echo "rm -rf $BACKUP_DIR"
echo ""
echo "To regenerate artifacts and cache run: npx hardhat compile" 